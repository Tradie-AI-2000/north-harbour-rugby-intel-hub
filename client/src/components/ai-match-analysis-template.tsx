import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { 
  Brain, 
  Send, 
  Mail, 
  MessageSquare, 
  Phone,
  Target,
  Shield,
  Zap,
  Activity,
  FileText,
  Clipboard
} from "lucide-react";

interface MatchAnalysisTemplateProps {
  playerId: string;
  playerName: string;
}

export default function AIMatchAnalysisTemplate({ playerId, playerName }: MatchAnalysisTemplateProps) {
  const [formData, setFormData] = useState({
    // General Info
    name: playerName,
    position: "Hooker",
    minutesPlayed: "",
    lineoutAccuracy: "",
    scrumSuccess: "",
    
    // GPS Tracking
    totalDistance: "",
    highSpeedEfforts: "",
    topSpeed: "",
    repeatedEffortBouts: "",
    
    // Core Role Performance
    corePositives: "",
    coreWorkOns: "",
    
    // Attack
    attackPositives: "",
    attackWorkOns: "",
    
    // Defence
    defencePositives: "",
    defenceWorkOns: "",
    
    // Strength & Conditioning
    recoveryStatus: "",
    fatigueIndicators: "",
    injuryConcerns: "",
    scFocus: ""
  });
  
  const [aiSummary, setAiSummary] = useState<string>("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedChannel, setSelectedChannel] = useState<string>("email");
  const [showAISummary, setShowAISummary] = useState(false);

  const updateFormData = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const generatePlayerSummary = async () => {
    setIsGenerating(true);
    
    // Simulate AI analysis based on form inputs
    setTimeout(() => {
      const summary = `
🏉 PLAYER PERFORMANCE SUMMARY - ${formData.name}

📊 MATCH OVERVIEW
Position: ${formData.position}
Minutes Played: ${formData.minutesPlayed}/80
Lineout Accuracy: ${formData.lineoutAccuracy}%
Scrum Success: ${formData.scrumSuccess}%

🚀 GPS PERFORMANCE INSIGHTS
Total Distance: ${formData.totalDistance}km - ${parseFloat(formData.totalDistance) > 6 ? 'Excellent work rate' : 'Good mobility'}
High-Speed Efforts: ${formData.highSpeedEfforts} - Shows strong explosive capacity
Top Speed: ${formData.topSpeed}km/h - Good pace for position
Repeated Efforts: ${formData.repeatedEffortBouts} - ${parseInt(formData.repeatedEffortBouts) > 15 ? 'Outstanding' : 'Good'} conditioning

🎯 PERFORMANCE ANALYSIS

**Core Role (${formData.position}):**
✅ Strengths: ${formData.corePositives}
🔧 Development Areas: ${formData.coreWorkOns}

**Attack:**
✅ Strengths: ${formData.attackPositives}
🔧 Development Areas: ${formData.attackWorkOns}

**Defence:** 
✅ Strengths: ${formData.defencePositives}
🔧 Development Areas: ${formData.defenceWorkOns}

💪 RECOVERY & CONDITIONING
Recovery Status: ${formData.recoveryStatus}
Fatigue Indicators: ${formData.fatigueIndicators}
${formData.injuryConcerns ? `⚠️ Injury Concerns: ${formData.injuryConcerns}` : '✅ No injury concerns'}

📋 WEEKLY FOCUS PLAN
${formData.scFocus}

🏆 COACH RECOMMENDATION
Based on this match performance, continue building on your strengths while focusing on the identified development areas. Your work rate and commitment were evident throughout the match. Keep up the excellent effort!

---
Generated by North Harbour Rugby Performance Hub
      `;
      
      setAiSummary(summary);
      setShowAISummary(true);
      setIsGenerating(false);
    }, 2000);
  };

  const sendToPlayer = () => {
    const channelText = selectedChannel === "email" ? "Email" : 
                      selectedChannel === "slack" ? "Slack" : "WhatsApp";
    alert(`Match analysis sent to ${formData.name} via ${channelText}!`);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Clipboard className="text-nh-red" size={24} />
            <span>Player Performance Analysis – Match Review</span>
          </CardTitle>
          <CardDescription>
            Fill out the match analysis form for personalized player feedback
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* General Info Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-nh-red flex items-center">
              📋 General Info
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="name">Name:</Label>
                <Input 
                  id="name"
                  value={formData.name}
                  onChange={(e) => updateFormData('name', e.target.value)}
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="position">Position:</Label>
                <Select value={formData.position} onValueChange={(value) => updateFormData('position', value)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Hooker">Hooker</SelectItem>
                    <SelectItem value="Prop">Prop</SelectItem>
                    <SelectItem value="Lock">Lock</SelectItem>
                    <SelectItem value="Flanker">Flanker</SelectItem>
                    <SelectItem value="Number 8">Number 8</SelectItem>
                    <SelectItem value="Scrum Half">Scrum Half</SelectItem>
                    <SelectItem value="Fly Half">Fly Half</SelectItem>
                    <SelectItem value="Centre">Centre</SelectItem>
                    <SelectItem value="Wing">Wing</SelectItem>
                    <SelectItem value="Fullback">Fullback</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="minutes">Minutes Played: _____ / 80</Label>
                <Input 
                  id="minutes"
                  value={formData.minutesPlayed}
                  onChange={(e) => updateFormData('minutesPlayed', e.target.value)}
                  placeholder="e.g., 75"
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="lineout">Lineout Accuracy (%):</Label>
                <Input 
                  id="lineout"
                  value={formData.lineoutAccuracy}
                  onChange={(e) => updateFormData('lineoutAccuracy', e.target.value)}
                  placeholder="e.g., 85"
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="scrum">Scrum Success (%):</Label>
                <Input 
                  id="scrum"
                  value={formData.scrumSuccess}
                  onChange={(e) => updateFormData('scrumSuccess', e.target.value)}
                  placeholder="e.g., 90"
                  className="mt-1"
                />
              </div>
            </div>
          </div>

          {/* GPS Tracking Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-blue-600 flex items-center">
              <Activity className="mr-2" size={20} />
              GPS Tracking Summary:
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="distance">Total Distance Covered: _____ km</Label>
                <Input 
                  id="distance"
                  value={formData.totalDistance}
                  onChange={(e) => updateFormData('totalDistance', e.target.value)}
                  placeholder="e.g., 6.2"
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="hsr">High-Speed Efforts (HSR):</Label>
                <Input 
                  id="hsr"
                  value={formData.highSpeedEfforts}
                  onChange={(e) => updateFormData('highSpeedEfforts', e.target.value)}
                  placeholder="e.g., 12"
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="topspeed">Top Speed: _____ km/h</Label>
                <Input 
                  id="topspeed"
                  value={formData.topSpeed}
                  onChange={(e) => updateFormData('topSpeed', e.target.value)}
                  placeholder="e.g., 28.5"
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="efforts">Repeated Effort Bouts:</Label>
                <Input 
                  id="efforts"
                  value={formData.repeatedEffortBouts}
                  onChange={(e) => updateFormData('repeatedEffortBouts', e.target.value)}
                  placeholder="e.g., 18"
                  className="mt-1"
                />
              </div>
            </div>
          </div>

          {/* Core Role Performance */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-nh-red flex items-center">
              🎯 Core Role Performance – {formData.position}
            </h3>
            <div className="space-y-3">
              <div>
                <Label htmlFor="corepos">🔹 Positives:</Label>
                <Textarea 
                  id="corepos"
                  value={formData.corePositives}
                  onChange={(e) => updateFormData('corePositives', e.target.value)}
                  placeholder="e.g., Excellent lineout throwing accuracy, strong scrum engagement..."
                  className="mt-1 min-h-[80px]"
                />
              </div>
              <div>
                <Label htmlFor="corework">🔹 Work-ons:</Label>
                <Textarea 
                  id="corework"
                  value={formData.coreWorkOns}
                  onChange={(e) => updateFormData('coreWorkOns', e.target.value)}
                  placeholder="e.g., Improve lineout timing, work on mobility around the field..."
                  className="mt-1 min-h-[80px]"
                />
              </div>
            </div>
          </div>

          {/* Attack Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-green-600 flex items-center">
              🏉 Attack
            </h3>
            <div className="space-y-3">
              <div>
                <Label htmlFor="attackpos">🔹 Positives:</Label>
                <Textarea 
                  id="attackpos"
                  value={formData.attackPositives}
                  onChange={(e) => updateFormData('attackPositives', e.target.value)}
                  placeholder="e.g., Good ball handling under pressure, effective support play..."
                  className="mt-1 min-h-[80px]"
                />
              </div>
              <div>
                <Label htmlFor="attackwork">🔹 Work-ons:</Label>
                <Textarea 
                  id="attackwork"
                  value={formData.attackWorkOns}
                  onChange={(e) => updateFormData('attackWorkOns', e.target.value)}
                  placeholder="e.g., Improve passing accuracy in contact, better decision making..."
                  className="mt-1 min-h-[80px]"
                />
              </div>
            </div>
          </div>

          {/* Defence Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-purple-600 flex items-center">
              <Shield className="mr-2" size={20} />
              Defence
            </h3>
            <div className="space-y-3">
              <div>
                <Label htmlFor="defencepos">🔹 Positives:</Label>
                <Textarea 
                  id="defencepos"
                  value={formData.defencePositives}
                  onChange={(e) => updateFormData('defencePositives', e.target.value)}
                  placeholder="e.g., Strong tackle completion rate, good defensive positioning..."
                  className="mt-1 min-h-[80px]"
                />
              </div>
              <div>
                <Label htmlFor="defencework">🔹 Work-ons:</Label>
                <Textarea 
                  id="defencework"
                  value={formData.defenceWorkOns}
                  onChange={(e) => updateFormData('defenceWorkOns', e.target.value)}
                  placeholder="e.g., Improve breakdown arrival speed, better communication..."
                  className="mt-1 min-h-[80px]"
                />
              </div>
            </div>
          </div>

          {/* Strength & Conditioning */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-orange-600 flex items-center">
              💪 Strength & Conditioning Notes
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="recovery">Recovery Status:</Label>
                <Input 
                  id="recovery"
                  value={formData.recoveryStatus}
                  onChange={(e) => updateFormData('recoveryStatus', e.target.value)}
                  placeholder="e.g., Good, needs extra recovery time..."
                  className="mt-1"
                />
              </div>
              <div>
                <Label htmlFor="fatigue">Fatigue Indicators:</Label>
                <Input 
                  id="fatigue"
                  value={formData.fatigueIndicators}
                  onChange={(e) => updateFormData('fatigueIndicators', e.target.value)}
                  placeholder="e.g., Slight decrease in speed in final quarter..."
                  className="mt-1"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="injury">Injury Concerns (if any):</Label>
                <Input 
                  id="injury"
                  value={formData.injuryConcerns}
                  onChange={(e) => updateFormData('injuryConcerns', e.target.value)}
                  placeholder="e.g., Minor shoulder stiffness, none..."
                  className="mt-1"
                />
              </div>
              <div className="md:col-span-2">
                <Label htmlFor="scfocus">S&C Focus for the Week Ahead:</Label>
                <Textarea 
                  id="scfocus"
                  value={formData.scFocus}
                  onChange={(e) => updateFormData('scFocus', e.target.value)}
                  placeholder="e.g., Focus on lineout lifting technique, core stability work, recovery protocols..."
                  className="mt-1 min-h-[100px]"
                />
              </div>
            </div>
          </div>

          {/* Generate Summary Button */}
          <div className="border-t pt-6">
            <Button 
              onClick={generatePlayerSummary} 
              disabled={isGenerating}
              className="w-full bg-purple-600 hover:bg-purple-700 text-white py-4 text-lg font-semibold"
            >
              {isGenerating ? (
                <>
                  <Brain className="animate-spin mr-2" size={20} />
                  Generating Player Summary...
                </>
              ) : (
                <>
                  <Brain className="mr-2" size={20} />
                  Generate Player Summary
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* AI Generated Summary */}
      {showAISummary && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Brain className="text-purple-600" size={24} />
              <span>AI Generated Player Summary</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-50 p-4 rounded-lg mb-6">
              <pre className="whitespace-pre-wrap text-sm font-mono">{aiSummary}</pre>
            </div>

            {/* Communication Channel Selection */}
            <div className="space-y-4">
              <h4 className="font-semibold text-gray-800">Send to Player:</h4>
              <div className="flex items-center space-x-4">
                <Label htmlFor="channel">Communication Channel:</Label>
                <Select value={selectedChannel} onValueChange={setSelectedChannel}>
                  <SelectTrigger className="w-48">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="email">
                      <div className="flex items-center space-x-2">
                        <Mail size={16} />
                        <span>Email</span>
                      </div>
                    </SelectItem>
                    <SelectItem value="slack">
                      <div className="flex items-center space-x-2">
                        <MessageSquare size={16} />
                        <span>Slack</span>
                      </div>
                    </SelectItem>
                    <SelectItem value="whatsapp">
                      <div className="flex items-center space-x-2">
                        <Phone size={16} />
                        <span>WhatsApp</span>
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex space-x-3">
                <Button onClick={sendToPlayer} className="flex-1 bg-green-600 hover:bg-green-700">
                  <Send className="mr-2" size={16} />
                  Send to {formData.name}
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => setShowAISummary(false)}
                  className="flex-1"
                >
                  Edit Analysis
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}