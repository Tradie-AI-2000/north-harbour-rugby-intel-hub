import type { Player } from "@shared/schema";
import type { AIAnalysis } from "@shared/types";

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY || "default_key";

const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent";

export async function generatePlayerAnalysis(player: Player): Promise<AIAnalysis> {
  if (!GEMINI_API_KEY || GEMINI_API_KEY === "default_key") {
    throw new Error("Gemini API key not configured");
  }

  // Prepare player data for analysis
  const currentPhysical = player.physicalAttributes[player.physicalAttributes.length - 1];
  const currentStats = player.gameStats[player.gameStats.length - 1];
  const latestTests = player.testResults.slice(-5); // Last 5 test results

  const prompt = `
Analyze the following rugby player data and provide a comprehensive performance summary:

Player: ${player.personalDetails.firstName} ${player.personalDetails.lastName}
Position: ${player.rugbyProfile.primaryPosition}
Years in team: ${player.rugbyProfile.yearsInTeam}

Current Physical Stats:
- Weight: ${currentPhysical?.weight}kg
- Body Fat: ${currentPhysical?.bodyFat}%
- Lean Mass: ${currentPhysical?.leanMass}kg

Current Season Performance (${currentStats?.season}):
- Matches Played: ${currentStats?.matchesPlayed}
- Minutes: ${currentStats?.minutesPlayed}
- Tries: ${currentStats?.tries}
- Tackles: ${currentStats?.tackles}
- Lineout Wins: ${currentStats?.lineoutWins}
- Turnovers: ${currentStats?.turnovers}

Recent Test Results:
${latestTests.map(test => `- ${test.testType}: ${test.value}${test.unit} (${test.date})`).join('\n')}

Skills Assessment (1-10):
- Ball Handling: ${player.skills.ballHandling}
- Passing: ${player.skills.passing}
- Defense: ${player.skills.defense}
- Rucking: ${player.skills.rucking}
- Communication: ${player.skills.communication}

Please provide:
1. A 2-3 sentence summary of current performance and development
2. 3-4 key strengths
3. 2-3 development areas
4. 2-3 specific recommendations

Format as JSON with keys: summary, strengths (array), developmentAreas (array), recommendations (array), confidenceScore (0-1).
`;

  try {
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          maxOutputTokens: 800,
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      throw new Error("No content generated by Gemini API");
    }

    // Try to parse JSON from the response
    try {
      const analysis = JSON.parse(generatedText);
      return {
        summary: analysis.summary || "Analysis completed",
        strengths: Array.isArray(analysis.strengths) ? analysis.strengths : [],
        developmentAreas: Array.isArray(analysis.developmentAreas) ? analysis.developmentAreas : [],
        recommendations: Array.isArray(analysis.recommendations) ? analysis.recommendations : [],
        confidenceScore: typeof analysis.confidenceScore === 'number' ? analysis.confidenceScore : 0.8
      };
    } catch (parseError) {
      // If JSON parsing fails, extract information from text
      return parseTextAnalysis(generatedText);
    }
  } catch (error) {
    console.error("Gemini API call failed:", error);
    throw error;
  }
}

function parseTextAnalysis(text: string): AIAnalysis {
  // Fallback text parsing if JSON format isn't returned
  const lines = text.split('\n').filter(line => line.trim());
  
  return {
    summary: lines.find(line => line.toLowerCase().includes('summary')) || 
             `Performance analysis for ${text.substring(0, 100)}...`,
    strengths: lines.filter(line => 
      line.toLowerCase().includes('strength') || 
      line.toLowerCase().includes('good') ||
      line.startsWith('- ')
    ).slice(0, 4),
    developmentAreas: lines.filter(line => 
      line.toLowerCase().includes('development') || 
      line.toLowerCase().includes('improvement') ||
      line.toLowerCase().includes('area')
    ).slice(0, 3),
    recommendations: lines.filter(line => 
      line.toLowerCase().includes('recommend') || 
      line.toLowerCase().includes('suggest')
    ).slice(0, 3),
    confidenceScore: 0.7
  };
}
